// <auto-generated />
using System;
using Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ApplicationCore.Entities.Book", b =>
                {
                    b.Property<int>("BookID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BookID"));

                    b.Property<string>("Author")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BookName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Categories")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImagePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("PublishedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Publisher")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StockQuantity")
                        .HasColumnType("int");

                    b.HasKey("BookID");

                    b.ToTable("Books");

                    b.HasData(
                        new
                        {
                            BookID = 1,
                            Author = "Tác giả A",
                            BookName = "The Throned Mirror",
                            Categories = "Tình cảm, Kinh dị",
                            Description = "Một câu chuyện về vương quốc bị sụp đổ và cuộc chiến tranh giành ngai vàng.",
                            ImagePath = "TheThronedMirror.jpg",
                            Price = 15000m,
                            PublishedDate = new DateTime(2022, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Publisher = "Nhà xuất bản A",
                            StockQuantity = 120
                        },
                        new
                        {
                            BookID = 2,
                            Author = "Tác giả B",
                            BookName = "The Sons of the Empire",
                            Categories = "Viễn tưởng, Kinh dị",
                            Description = "Hành trình của những người thừa kế đế chế cổ đại trong một thế giới đầy âm mưu.",
                            ImagePath = "TheSonOfTheEmpire.jpg",
                            Price = 18000m,
                            PublishedDate = new DateTime(2023, 3, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Publisher = "Nhà xuất bản B",
                            StockQuantity = 90
                        },
                        new
                        {
                            BookID = 3,
                            Author = "Tác giả C",
                            BookName = "The Born of APLEX",
                            Categories = "Khoa học, Viễn tưởng",
                            Description = "Cuộc cách mạng công nghệ sinh học mang đến sự thay đổi toàn cầu.",
                            ImagePath = "TheBornofAPLEX.jpg",
                            Price = 22000m,
                            PublishedDate = new DateTime(2021, 8, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Publisher = "Nhà xuất bản C",
                            StockQuantity = 150
                        },
                        new
                        {
                            BookID = 4,
                            Author = "Tác giả D",
                            BookName = "Ark Forging",
                            Categories = "Viễn tưởng, Kinh dị",
                            Description = "Một cuộc phiêu lưu trong thế giới mới, nơi mà sinh tồn là mục tiêu duy nhất.",
                            ImagePath = "ArkForging.jpg",
                            Price = 20000m,
                            PublishedDate = new DateTime(2024, 1, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Publisher = "Nhà xuất bản D",
                            StockQuantity = 110
                        },
                        new
                        {
                            BookID = 5,
                            Author = "Tác giả E",
                            BookName = "2024: Sanctuary",
                            Categories = "Khoa học, Viễn tưởng",
                            Description = "Mọi hy vọng đều dồn vào nơi trú ẩn cuối cùng khi thế giới đang trên bờ vực diệt vong.",
                            ImagePath = "2024Sanctuary.jpg",
                            Price = 25000m,
                            PublishedDate = new DateTime(2024, 6, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Publisher = "Nhà xuất bản E",
                            StockQuantity = 130
                        },
                        new
                        {
                            BookID = 6,
                            Author = "Tác giả F",
                            BookName = "Cyber Angle",
                            Categories = "Khoa học, Hài hước",
                            Description = "Khi công nghệ có thể điều khiển cuộc sống, những bí mật ẩn giấu từ lâu sẽ bị phơi bày.",
                            ImagePath = "CyberAngle.jpg",
                            Price = 17000m,
                            PublishedDate = new DateTime(2023, 11, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Publisher = "Nhà xuất bản F",
                            StockQuantity = 140
                        },
                        new
                        {
                            BookID = 7,
                            Author = "Tác giả G",
                            BookName = "Mists of Algorab",
                            Categories = "Tình cảm, Hài hước",
                            Description = "Chuyến hành trình kỳ bí vào khu rừng nơi mà không ai biết được điều gì đang chờ đợi.",
                            ImagePath = "MistsofAlgorab.jpg",
                            Price = 19000m,
                            PublishedDate = new DateTime(2022, 4, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Publisher = "Nhà xuất bản G",
                            StockQuantity = 100
                        },
                        new
                        {
                            BookID = 8,
                            Author = "Tác giả H",
                            BookName = "The Return of The King",
                            Categories = "Tình cảm, Viễn tưởng",
                            Description = "Vị vua cũ trở lại để dẫn dắt vương quốc chống lại quân thù.",
                            ImagePath = "TheReturnofTheKing.jpg",
                            Price = 21000m,
                            PublishedDate = new DateTime(2021, 9, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Publisher = "Nhà xuất bản H",
                            StockQuantity = 80
                        },
                        new
                        {
                            BookID = 9,
                            Author = "Tác giả I",
                            BookName = "The Silmarillion",
                            Categories = "Viễn tưởng, Kinh dị",
                            Description = "Lịch sử của những vương quốc cổ xưa và những anh hùng vĩ đại.",
                            ImagePath = "TheSilmarillion.jpg",
                            Price = 24000m,
                            PublishedDate = new DateTime(2022, 12, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Publisher = "Nhà xuất bản I",
                            StockQuantity = 75
                        },
                        new
                        {
                            BookID = 10,
                            Author = "Tác giả J",
                            BookName = "Six Of Crows Book",
                            Categories = "Kinh dị, Hài hước",
                            Description = "Một đội ngũ tội phạm với những mục tiêu bất khả thi phải đối mặt với những thử thách khủng khiếp.",
                            ImagePath = "SixOfCrowsBook.jpg",
                            Price = 26000m,
                            PublishedDate = new DateTime(2023, 7, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Publisher = "Nhà xuất bản J",
                            StockQuantity = 110
                        },
                        new
                        {
                            BookID = 11,
                            Author = "Tác giả K",
                            BookName = "The Hobbit",
                            Categories = "Viễn tưởng, Tình cảm",
                            Description = "Cuộc phiêu lưu của Bilbo Baggins vào thế giới của những sinh vật kỳ lạ.",
                            ImagePath = "TheHobbit.jpg",
                            Price = 23000m,
                            PublishedDate = new DateTime(2021, 10, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Publisher = "Nhà xuất bản K",
                            StockQuantity = 120
                        },
                        new
                        {
                            BookID = 12,
                            Author = "Tác giả L",
                            BookName = "The Killing Jar",
                            Categories = "Kinh dị, Hài hước",
                            Description = "Một câu chuyện kinh dị về tội phạm và những bí mật đen tối.",
                            ImagePath = "TheKillingJar.jpg",
                            Price = 15000m,
                            PublishedDate = new DateTime(2020, 5, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Publisher = "Nhà xuất bản L",
                            StockQuantity = 140
                        },
                        new
                        {
                            BookID = 13,
                            Author = "Tác giả M",
                            BookName = "Ponti",
                            Categories = "Tình cảm, Hài hước",
                            Description = "Một câu chuyện đầy cảm xúc về tình yêu, sự mất mát và tìm lại chính mình.",
                            ImagePath = "Ponti.jpg",
                            Price = 21000m,
                            PublishedDate = new DateTime(2023, 2, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Publisher = "Nhà xuất bản M",
                            StockQuantity = 100
                        },
                        new
                        {
                            BookID = 14,
                            Author = "Tác giả N",
                            BookName = "The Memory Of Light",
                            Categories = "Tình cảm, Viễn tưởng",
                            Description = "Một câu chuyện về sự khôi phục và chiến đấu với ánh sáng bên trong.",
                            ImagePath = "TheMemoryOfLight.jpg",
                            Price = 20000m,
                            PublishedDate = new DateTime(2022, 11, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Publisher = "Nhà xuất bản N",
                            StockQuantity = 120
                        },
                        new
                        {
                            BookID = 15,
                            Author = "Tác giả O",
                            BookName = "The Stepsisters",
                            Categories = "Tình cảm, Kinh dị",
                            Description = "Một câu chuyện về sự ganh đua và tình yêu giữa những người chị em.",
                            ImagePath = "TheStepsisters.jpg",
                            Price = 19000m,
                            PublishedDate = new DateTime(2021, 1, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Publisher = "Nhà xuất bản O",
                            StockQuantity = 130
                        });
                });

            modelBuilder.Entity("ApplicationCore.Entities.Category", b =>
                {
                    b.Property<int>("CategoryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryID"));

                    b.Property<string>("CategoryName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CategoryID");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            CategoryID = 1,
                            CategoryName = "Tình cảm"
                        },
                        new
                        {
                            CategoryID = 2,
                            CategoryName = "Khoa học"
                        },
                        new
                        {
                            CategoryID = 3,
                            CategoryName = "Viễn tưởng"
                        },
                        new
                        {
                            CategoryID = 4,
                            CategoryName = "Kinh dị"
                        },
                        new
                        {
                            CategoryID = 5,
                            CategoryName = "Hài hước"
                        },
                        new
                        {
                            CategoryID = 6,
                            CategoryName = "Sức khỏe"
                        });
                });

            modelBuilder.Entity("ApplicationCore.Entities.Customer", b =>
                {
                    b.Property<int>("CustomerID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CustomerID"));

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CCCD")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("FullInfo")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("RefreshTokenExpiry")
                        .HasColumnType("datetime2");

                    b.Property<string>("Role")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CustomerID");

                    b.ToTable("Customers");

                    b.HasData(
                        new
                        {
                            CustomerID = 1,
                            Address = "123 Main St",
                            CCCD = "123456789123",
                            Email = "nguyenhuuvinh2893@gmail.com",
                            FullInfo = true,
                            FullName = "Nguyễn Hữu Vĩnh",
                            IsDeleted = false,
                            Password = "2AF4gdHEe420oL99HvtI6pHqfhyoJWbpHPPJ3Nuo5eo=",
                            Phone = "0123456789",
                            Role = "Manager",
                            Username = "bookstoremanager"
                        },
                        new
                        {
                            CustomerID = 2,
                            Address = "456 Elm St",
                            CCCD = "987654321456",
                            Email = "huuvinhhoctap0903@gmail.com",
                            FullInfo = true,
                            FullName = "Nguyen Admin",
                            IsDeleted = false,
                            Password = "2AF4gdHEe420oL99HvtI6pHqfhyoJWbpHPPJ3Nuo5eo=",
                            Phone = "0987654321",
                            Role = "Admin",
                            Username = "bookstoreadmin"
                        },
                        new
                        {
                            CustomerID = 3,
                            Address = "789 Oak St",
                            CCCD = "456789123142",
                            Email = "levanc@example.com",
                            FullInfo = true,
                            FullName = "Tran User",
                            IsDeleted = false,
                            Password = "2AF4gdHEe420oL99HvtI6pHqfhyoJWbpHPPJ3Nuo5eo=",
                            Phone = "0345678912",
                            Role = "User",
                            Username = "bookstoreuser"
                        },
                        new
                        {
                            CustomerID = 4,
                            Address = "321 Pine St",
                            CCCD = "654321987425",
                            Email = "phamthid@example.com",
                            FullInfo = true,
                            FullName = "Pham Thi D",
                            IsDeleted = false,
                            Password = "2AF4gdHEe420oL99HvtI6pHqfhyoJWbpHPPJ3Nuo5eo=",
                            Phone = "0765432198",
                            Role = "User",
                            Username = "phamthid"
                        },
                        new
                        {
                            CustomerID = 5,
                            Address = "987 Maple St",
                            CCCD = "321654987487",
                            Email = "hoangvane@example.com",
                            FullInfo = true,
                            FullName = "Hoang Van E",
                            IsDeleted = false,
                            Password = "2AF4gdHEe420oL99HvtI6pHqfhyoJWbpHPPJ3Nuo5eo=",
                            Phone = "0891234567",
                            Role = "User",
                            Username = "hoangvane"
                        },
                        new
                        {
                            CustomerID = 6,
                            Address = "123 Main St",
                            CCCD = "123456789628",
                            Email = "nguyenvana@example.com",
                            FullInfo = true,
                            FullName = "Nguyễn Văn A",
                            IsDeleted = true,
                            Password = "2AF4gdHEe420oL99HvtI6pHqfhyoJWbpHPPJ3Nuo5eo=",
                            Phone = "0123456789",
                            Role = "User",
                            Username = "bookstoreuser"
                        });
                });

            modelBuilder.Entity("ApplicationCore.Entities.Order", b =>
                {
                    b.Property<int>("OrderID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderID"));

                    b.Property<int?>("CustomerID")
                        .HasColumnType("int");

                    b.Property<string>("GuestAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GuestCCCD")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GuestEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GuestFullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GuestPhone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("OrderStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PaymentMethod")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("OrderID");

                    b.HasIndex("CustomerID");

                    b.ToTable("Orders");

                    b.HasData(
                        new
                        {
                            OrderID = 1,
                            CustomerID = 1,
                            OrderDate = new DateTime(2024, 5, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OrderStatus = "Completed",
                            PaymentMethod = "COD"
                        },
                        new
                        {
                            OrderID = 2,
                            CustomerID = 2,
                            OrderDate = new DateTime(2024, 6, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OrderStatus = "Completed",
                            PaymentMethod = "COD"
                        },
                        new
                        {
                            OrderID = 3,
                            CustomerID = 3,
                            OrderDate = new DateTime(2024, 8, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OrderStatus = "Completed",
                            PaymentMethod = "COD"
                        },
                        new
                        {
                            OrderID = 4,
                            CustomerID = 4,
                            OrderDate = new DateTime(2024, 9, 26, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OrderStatus = "Completed",
                            PaymentMethod = "COD"
                        },
                        new
                        {
                            OrderID = 5,
                            CustomerID = 5,
                            OrderDate = new DateTime(2024, 10, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OrderStatus = "Cancelled",
                            PaymentMethod = "MOMO"
                        },
                        new
                        {
                            OrderID = 6,
                            GuestAddress = "123 Main St",
                            GuestCCCD = "123456789",
                            GuestEmail = "nguyenvana@example.com",
                            GuestFullName = "Nguyen Van B",
                            GuestPhone = "0123456789",
                            OrderDate = new DateTime(2024, 11, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OrderStatus = "Pending",
                            PaymentMethod = "MOMO"
                        },
                        new
                        {
                            OrderID = 7,
                            GuestAddress = "123 Main St",
                            GuestCCCD = "123456789",
                            GuestEmail = "nguyenvana@example.com",
                            GuestFullName = "Nguyen Van B",
                            GuestPhone = "0123456789",
                            OrderDate = new DateTime(2024, 12, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OrderStatus = "Pending",
                            PaymentMethod = "MOMO"
                        });
                });

            modelBuilder.Entity("ApplicationCore.Entities.OrderDetail", b =>
                {
                    b.Property<int>("OrderDetailID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderDetailID"));

                    b.Property<int>("BookID")
                        .HasColumnType("int");

                    b.Property<int>("OrderID")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("OrderDetailID");

                    b.HasIndex("BookID");

                    b.HasIndex("OrderID");

                    b.ToTable("OrderDetails");

                    b.HasData(
                        new
                        {
                            OrderDetailID = 1,
                            BookID = 1,
                            OrderID = 1,
                            Price = 20000m,
                            Quantity = 2
                        },
                        new
                        {
                            OrderDetailID = 2,
                            BookID = 2,
                            OrderID = 1,
                            Price = 22000m,
                            Quantity = 1
                        },
                        new
                        {
                            OrderDetailID = 3,
                            BookID = 3,
                            OrderID = 2,
                            Price = 25000m,
                            Quantity = 3
                        },
                        new
                        {
                            OrderDetailID = 4,
                            BookID = 4,
                            OrderID = 2,
                            Price = 30000m,
                            Quantity = 1
                        },
                        new
                        {
                            OrderDetailID = 5,
                            BookID = 5,
                            OrderID = 3,
                            Price = 15000m,
                            Quantity = 5
                        },
                        new
                        {
                            OrderDetailID = 6,
                            BookID = 2,
                            OrderID = 4,
                            Price = 22000m,
                            Quantity = 1
                        },
                        new
                        {
                            OrderDetailID = 7,
                            BookID = 3,
                            OrderID = 5,
                            Price = 25000m,
                            Quantity = 7
                        },
                        new
                        {
                            OrderDetailID = 8,
                            BookID = 1,
                            OrderID = 6,
                            Price = 20000m,
                            Quantity = 10
                        },
                        new
                        {
                            OrderDetailID = 9,
                            BookID = 4,
                            OrderID = 7,
                            Price = 30000m,
                            Quantity = 5
                        });
                });

            modelBuilder.Entity("ApplicationCore.Entities.ShoppingCart", b =>
                {
                    b.Property<int>("CartID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CartID"));

                    b.Property<int>("BookID")
                        .HasColumnType("int");

                    b.Property<int>("CustomerID")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("CartID");

                    b.HasIndex("BookID");

                    b.HasIndex("CustomerID");

                    b.ToTable("ShoppingCarts");

                    b.HasData(
                        new
                        {
                            CartID = 1,
                            BookID = 1,
                            CustomerID = 1,
                            Quantity = 1
                        },
                        new
                        {
                            CartID = 2,
                            BookID = 2,
                            CustomerID = 2,
                            Quantity = 2
                        },
                        new
                        {
                            CartID = 3,
                            BookID = 3,
                            CustomerID = 3,
                            Quantity = 1
                        },
                        new
                        {
                            CartID = 4,
                            BookID = 4,
                            CustomerID = 4,
                            Quantity = 3
                        },
                        new
                        {
                            CartID = 5,
                            BookID = 5,
                            CustomerID = 5,
                            Quantity = 1
                        });
                });

            modelBuilder.Entity("ApplicationCore.Entities.Order", b =>
                {
                    b.HasOne("ApplicationCore.Entities.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerID");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("ApplicationCore.Entities.OrderDetail", b =>
                {
                    b.HasOne("ApplicationCore.Entities.Book", "Book")
                        .WithMany()
                        .HasForeignKey("BookID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApplicationCore.Entities.Order", "Order")
                        .WithMany()
                        .HasForeignKey("OrderID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("ApplicationCore.Entities.ShoppingCart", b =>
                {
                    b.HasOne("ApplicationCore.Entities.Book", "Book")
                        .WithMany()
                        .HasForeignKey("BookID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApplicationCore.Entities.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("Customer");
                });
#pragma warning restore 612, 618
        }
    }
}
